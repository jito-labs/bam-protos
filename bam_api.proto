syntax = "proto3";

package bam_api;

import "bam_types.proto";

import "google/protobuf/timestamp.proto";

/// Top-level API request/response types live here; other types are in types.proto

// Request to get an authentication challenge to sign
message AuthChallengeRequest {}

// Response containing the challenge to sign
message AuthChallengeResponse {
  string challenge_to_sign = 1;
}

// Request to get the block-engine + BAM node configuration
message ConfigRequest {}

message ConfigResponse {
  bam_types.BlockEngineBuilderConfig block_engine_config = 1;
  bam_types.BamConfig bam_config = 2;
}

// Message sent by the Validator to the Node
message SchedulerMessage {
  oneof versioned_msg {
    SchedulerMessageV0 v0 = 1;
  }
}

message SchedulerMessageV0 {
  oneof msg {
    bam_types.ValidatorHeartBeat heart_beat = 1;
    bam_types.LeaderState leader_state = 2;
    bam_types.MultipleAtomicTxnBatchResult multiple_atomic_txn_batch_result = 3;
    bam_types.AuthProof auth_proof = 4;
    bam_types.Pong pong = 5;
  }
}

// Response sent by the Node to the Validator
message SchedulerResponse {
  oneof versioned_msg {
    SchedulerResponseV0 v0 = 1;
  }
}

message SchedulerResponseV0 {
  oneof resp {
    bam_types.BuilderHeartBeat heart_beat = 1;
    bam_types.MultipleAtomicTxnBatch multiple_atomic_txn_batch = 2;
    bam_types.Ping ping = 3;
  }
}

service BamNodeApi {
  // Get an authentication challenge to sign and send within `stream SchedulerMessage`
  // in order to authenticate the Validator and start receiving scheduling messages
  rpc GetAuthChallenge(AuthChallengeRequest) returns (AuthChallengeResponse) {}

  // Request the most recent configuration from the BAM node
  rpc GetBuilderConfig(ConfigRequest) returns (ConfigResponse) {}

  // Initialize the scheduler stream; a long-lived stream, bi-directional stream
  // used for txn scheduling purposes
  rpc InitSchedulerStream(stream SchedulerMessage) returns (stream SchedulerResponse) {}
}